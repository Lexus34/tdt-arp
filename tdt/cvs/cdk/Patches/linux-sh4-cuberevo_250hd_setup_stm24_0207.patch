--- a/arch/sh/Makefile	2011-08-16 18:57:57.000000000 +0200
+++ b/arch/sh/Makefile	2011-08-25 20:33:12.078531194 +0200
@@ -74,7 +74,7 @@
 cflags-y	+= $(isaflags-y) -ffreestanding
 
 OBJCOPYFLAGS	:= -O binary -R .note -R .note.gnu.build-id -R .comment \
-		   -R .stab -R .stabstr -S
+		   -R .stab -R .stabstr -S -R .empty_zero_page
 
 # Give the various platforms the opportunity to set default image types
 defaultimage-$(CONFIG_SUPERH32)			:= zImage
--- a/arch/sh/kernel/setup.c	2011-08-16 18:57:58.000000000 +0200
+++ b/kernel/setup.c	2011-08-25 20:34:57.688583893 +0200
@@ -419,6 +419,34 @@
 #endif
 #endif
 
+	{
+	char org_command_line[] = "console=ttyAS0,115200 root=/dev/mtdblock3";
+	char tdt_command_line[] = "console=ttyAS0,115200 root=/dev/mtdblock4 rw rootfstype=jffs2 init=/bin/devinit coprocessor_mem=4m@0x40000000,4m@0x40400000 printk=1 stmmaceth=ethaddr:";
+	char mac[] = "00:00:00:00:00:00";
+	int command_line_len = strlen(command_line);
+	int org_command_line_len = strlen(org_command_line);
+
+	if(command_line_len >= org_command_line_len && !strncmp(command_line, org_command_line, org_command_line_len))
+	{
+		int i;
+		for(i = 0; i < (command_line_len - 7); i++)
+		{
+			if(!strncmp(command_line + i, "ethaddr", 7))
+			{
+				strlcpy(mac, command_line + i + 8, sizeof(mac));
+				break;
+			}
+			if(!strncmp(command_line + i, "hwaddr", 6))
+			{
+				strlcpy(mac, command_line + i + 7, sizeof(mac));
+				break;
+			}
+		}
+		strlcpy(command_line, tdt_command_line, sizeof(command_line));
+		strlcat(command_line, mac, sizeof(command_line));
+	}
+	}
+
 	/* Save unparsed command line copy for /proc/cmdline */
 	memcpy(boot_command_line, command_line, COMMAND_LINE_SIZE);
 	*cmdline_p = command_line;
--- a/drivers/stm/stx7100_comms.c	2011-08-16 18:58:00.000000000 +0200
+++ b/stx7100_comms.c	2011-09-21 20:11:09.330974528 +0200
@@ -238,14 +238,14 @@
 		.gpios_num = 2,
 		.gpios = (struct stm_pad_gpio []) {
 			STM_PAD_PIO_BIDIR_NAMED(3, 0, 1, "SCL"),
-			STM_PAD_PIO_BIDIR_NAMED(3, 1, 1, "SDA"),
+			STM_PAD_PIO_BIDIR_NAMED(3, 2, 1, "SDA"),
 		},
-		.sysconfs_num = 2,
+		.sysconfs_num = 1,
 		.sysconfs = (struct stm_pad_sysconf []) {
 			/* SSC1_MUX_SEL = 0 (default assignment) */
 			STM_PAD_SYS_CFG(7, 2, 2, 0),
-			/* DVO_OUT_ON = 0 (SSC not DVO) */
-			STM_PAD_SYS_CFG(7, 10, 10, 0),
+			/* DVO_OUT_ON = 0 (SSC not DVO) 
+			STM_PAD_SYS_CFG(7, 10, 10, 0),*/
 		},
 	},
 	[2] = {
@@ -344,7 +344,7 @@
 	BUG_ON(stx7100_ssc_configured[ssc]);
 	stx7100_ssc_configured[ssc] = 1;
 
-	stx7100_ssc_devices[ssc].name = "i2c-stm";
+	stx7100_ssc_devices[ssc].name = "i2c-st40";
 	stx7100_ssc_devices[ssc].id = i2c_busnum;
 
 	plat_data = stx7100_ssc_devices[ssc].dev.platform_data;
--- a/arch/sh/boards/mach-mb442/setup.c	2011-08-16 18:57:57.000000000 +0200
+++ b/setup.c	2011-09-29 16:58:45.602366977 +0200
@@ -22,6 +22,7 @@
 #include <linux/stm/platform.h>
 #include <linux/stm/stx7100.h>
 #include <asm/irl.h>
+#include <linux/bpa2.h>
 
 
 
@@ -29,7 +30,81 @@
 #define MB442_PIO_SMC91X_RESET stm_gpio(2, 6)
 #define MB442_PIO_FLASH_VPP stm_gpio(2, 7)
 
+const char *LMI_VID_partalias[] = { "BPA2_Region1", "coredisplay-video", "gfx-memory", "v4l2-video-buffers", NULL };
+const char *LMI_SYS_partalias[] = { "BPA2_Region0", "bigphysarea", "v4l2-coded-video-buffers", NULL };
+ 
+#ifdef CONFIG_32BIT
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+	{
+		.name  = "LMI_VID",
+		.start = 0x81000000,
+		.size  = 0x07000000,
+		.flags = 0,
+		.aka   = LMI_VID_partalias
+	},
+	{
+		.name  = "LMI_SYS",
+		.start = 0,
+		.size  = 0x05000000,
+		.flags = 0,
+		.aka   = LMI_SYS_partalias
+	}
+};
+#else
+static struct bpa2_partition_desc bpa2_parts_table[] = {
+	{
+		.name  = "LMI_VID",
+		.start = 0x10800000,
+		.size  = 0x03800000,
+		.flags = 0,
+		.aka   = LMI_VID_partalias
+	},
+	{
+		.name  = "LMI_SYS",
+		.start = 0,
+		.size  = 0x02600000,
+		.flags = 0,
+		.aka   = LMI_SYS_partalias
+	}
+};
+#endif /* CONFIG_32BIT */
 
+/* configure the hdmi hotplug pio (2.2) to STPIO_BIDIR_Z1 as requested
+ * in the stmfb code and in bugzilla 9728
+ *
+ * code taken from old stpio stuff.
+ */
+
+#define PIO_BASE			0xb8020000  
+#define STPIO_PC0_OFFSET	0x20
+#define STPIO_PC1_OFFSET	0x30
+#define STPIO_PC2_OFFSET	0x40
+#define STPIO_SET_OFFSET	0x4
+#define STPIO_CLEAR_OFFSET	0x8
+#define PIO_PORT_SIZE			0x1000
+#define PIO_PORT(n) (((n)*PIO_PORT_SIZE) + PIO_BASE)
+
+/* directions */
+#define STPIO_NONPIO		0	/* Non-PIO function (ST40 defn) */
+#define STPIO_BIDIR_Z1     	0	/* Input weak pull-up (arch defn) */
+#define STPIO_BIDIR		1	/* Bidirectonal open-drain */
+#define STPIO_OUT		2	/* Output push-pull */
+#define STPIO_IN		4	/* Input Hi-Z */
+#define STPIO_ALT_OUT		6	/* Alt output push-pull (arch defn) */
+#define STPIO_ALT_BIDIR		7	/* Alt bidir open drain (arch defn) */
+
+void configure_pin(int portno, int pinno, int direction)
+{
+	writel(1 << pinno, PIO_PORT(portno) + STPIO_PC0_OFFSET +
+			((direction & (1 << 0)) ? STPIO_SET_OFFSET :
+			STPIO_CLEAR_OFFSET));
+	writel(1 << pinno, PIO_PORT(portno) + STPIO_PC1_OFFSET +
+			((direction & (1 << 1)) ? STPIO_SET_OFFSET :
+			STPIO_CLEAR_OFFSET));
+	writel(1 << pinno, PIO_PORT(portno) + STPIO_PC2_OFFSET +
+			((direction & (1 << 2)) ? STPIO_SET_OFFSET :
+			 STPIO_CLEAR_OFFSET));
+}
 
 void __init mb442_setup(char** cmdline_p)
 {
@@ -39,30 +114,113 @@
 
 	stx7100_configure_asc(2, &(struct stx7100_asc_config) {
 			.hw_flow_control = 0,
-			.is_console = 1, });
+			.is_console = 0, });
+
 	stx7100_configure_asc(3, &(struct stx7100_asc_config) {
 			.hw_flow_control = 0,
-			.is_console = 0, });
+			.is_console = 1, });
+
+	bpa2_init(bpa2_parts_table, ARRAY_SIZE(bpa2_parts_table));
 }
 
-static struct resource mb442_smc91x_resources[] = {
-	[0] = {
-		.start	= 0x02000300,
-		.end	= 0x02000300 + 0xff,
-		.flags	= IORESOURCE_MEM,
-	},
-	[1] = {
-		.start	= IRL0_IRQ,
-		.end	= IRL0_IRQ,
-		.flags	= IORESOURCE_IRQ,
-	},
-};
+#define	FLASH_32MB
+//#define FLASH_16MB
+
+#if defined(FLASH_32MB)
 
-static struct platform_device mb442_smc91x_device = {
-	.name		= "smc91x",
-	.id		= 0,
-	.num_resources	= ARRAY_SIZE(mb442_smc91x_resources),
-	.resource	= mb442_smc91x_resources,
+// 32MB flash
+#define WINDOW_ADDR	0xA0000000
+#define WINDOW_SIZE	0x02000000
+
+#define BOOT_SIZE	0x040000	// boot loader
+#define WELCOME_SIZE	0x020000	// welcomeboot config
+#define KERNEL_SIZE	0x200000	// kernel size
+#define ROOT_SIZE	(WINDOW_SIZE-WELCOME_SIZE-KERNEL_SIZE-DB_SIZE-BOOT_SIZE)
+#define DB_SIZE	0xa00000
+
+#elif defined(FLASH_16MB) 
+
+// 16MB flash
+#define WINDOW_ADDR	0xA0000000
+#define WINDOW_SIZE	0x01000000
+
+#define BOOT_SIZE	0x040000	// boot loader
+#define WELCOME_SIZE	0x020000	// welcomeboot config
+#define KERNEL_SIZE	0x1A0000	// kernel size
+#define ROOT_SIZE	(WINDOW_SIZE-WELCOME_SIZE-KERNEL_SIZE-DB_SIZE-BOOT_SIZE)
+#define DB_SIZE		0x600000
+#else
+
+// 8MB flash
+#define WINDOW_ADDR     0xA0000000 	 
+#define WINDOW_SIZE     0x00800000 	 
+
+#define BOOT_SIZE       0x030000        // boot loader 	 
+#define WELCOME_SIZE    0x010000        // welcomeboot config 	 
+#define KERNEL_SIZE     0x180000        // kernel size 	 
+#define ROOT_SIZE       (WINDOW_SIZE-WELCOME_SIZE-KERNEL_SIZE-DB_SIZE-BOOT_SIZE) 	 
+#define DB_SIZE         0x230000
+
+
+#endif
+
+
+
+#define ONBOARD_ADDR 0x00000000
+
+#define ONBOARD_SIZE		WINDOW_SIZE
+#define ONBOARD_BANKWIDTH	2
+
+static struct mtd_partition mtd_parts_table[] = {
+   {
+       .name       = "nor.boot",
+       .offset     = 0x00000000,
+       .size       = BOOT_SIZE,
+       .mask_flags = MTD_WRITEABLE,    /* force read-only */
+   },
+   {
+       .name       = "nor.config",
+       .offset     = BOOT_SIZE,
+       .size       = WELCOME_SIZE,
+   },
+   {   .name       = "nor.kernel",
+       .offset     = BOOT_SIZE + WELCOME_SIZE,
+       .size       = KERNEL_SIZE,
+       .mask_flags = MTD_WRITEABLE,
+   },
+   {
+       .name       = "nor.root",
+       .offset     = BOOT_SIZE + WELCOME_SIZE + KERNEL_SIZE,
+       .size       = ROOT_SIZE,
+       .mask_flags = MTD_WRITEABLE,
+   },
+   {
+       .name       = "nor.db",
+       .offset     = BOOT_SIZE+WELCOME_SIZE+KERNEL_SIZE+ROOT_SIZE,
+       .size       = DB_SIZE,
+   },
+   /* partitions for upgrade */
+   {
+       .name       = "nor.kernel_root",
+       .offset     = BOOT_SIZE+WELCOME_SIZE,
+       .size       = KERNEL_SIZE+ROOT_SIZE,
+   },
+   {
+       .name       = "nor.kernel_root_db",
+       .offset     = BOOT_SIZE+WELCOME_SIZE,
+       .size       = KERNEL_SIZE+ROOT_SIZE+DB_SIZE,
+   },
+   {
+       .name       = "nor.all_noboot",
+       .offset     = BOOT_SIZE,
+       .size       = (WINDOW_SIZE-BOOT_SIZE),
+   },
+   {
+       .name       = "nor.all",
+       .offset     = 0,
+       .size       = WINDOW_SIZE,
+       .mask_flags = MTD_WRITEABLE,    /* force read-only */
+   },
 };
 
 static void mb442_set_vpp(struct map_info *info, int enable)
@@ -75,27 +233,30 @@
 	.id		= -1,
 	.num_resources	= 1,
 	.resource	= (struct resource[]) {
-		STM_PLAT_RESOURCE_MEM(0, 8*1024*1024),
+		STM_PLAT_RESOURCE_MEM(0, 32*1024*1024),
 	},
 	.dev.platform_data = &(struct physmap_flash_data) {
 		.width		= 2,
 		.set_vpp	= mb442_set_vpp,
+	    .nr_parts	= ARRAY_SIZE(mtd_parts_table),
+	    .parts		= mtd_parts_table
 	},
 };
 
 
 static int mb442_phy_reset(void* bus)
 {
+/*
 	gpio_set_value(MB442_PIO_STE100P_RESET, 1);
 	udelay(1);
 	gpio_set_value(MB442_PIO_STE100P_RESET, 0);
 	udelay(1);
 	gpio_set_value(MB442_PIO_STE100P_RESET, 1);
-
+*/
 	return 1;
 }
 
-#define STMMAC_PHY_ADDR 14
+#define STMMAC_PHY_ADDR 1
 static int stmmac_phy_irqs[PHY_MAX_ADDR] = {
 	[STMMAC_PHY_ADDR] = IRL3_IRQ,
 };
@@ -106,41 +267,43 @@
 	.irqs = stmmac_phy_irqs,
 };
 
+static struct platform_device pdiusbd12_device = {
+	.name           = "pdiusbd12",
+	.id             = -1,
+	.num_resources  = 2,
+	.resource       = (struct resource[]) {
+		{
+	                .start = 0xa2000000,
+		        .end   = 0xa200ffff,
+	        	.flags  = IORESOURCE_MEM,
+		},
+		{
+			.name   = "usbirq",
+	        	.start  = IRL0_IRQ,
+	        	.end    = IRL0_IRQ,
+	        	.flags  = IORESOURCE_IRQ,
+		},
+	},
+};
+
 static struct platform_device *mb442_devices[] __initdata = {
-	&mb442_smc91x_device,
 	&mb442_physmap_flash,
+	&pdiusbd12_device,
 };
 
 static int __init mb442_device_init(void)
 {
 	stx7100_configure_sata();
 
-	stx7100_configure_pwm(&(struct stx7100_pwm_config) {
-			.out0_enabled = 0,
-			.out1_enabled = 1, });
-
 	stx7100_configure_ssc_i2c(0);
-	stx7100_configure_ssc_spi(1, NULL);
+	stx7100_configure_ssc_i2c(1);
 	stx7100_configure_ssc_i2c(2);
 
 	stx7100_configure_usb();
 
-	stx7100_configure_lirc(&(struct stx7100_lirc_config) {
-			.rx_mode = stx7100_lirc_rx_mode_ir,
-			.tx_enabled = 0,
-			.tx_od_enabled = 0, });
-
-	stx7100_configure_pata(&(struct stx7100_pata_config) {
-			.emi_bank = 3,
-			.pc_mode = 1,
-			.irq = IRL1_IRQ, });
-
 	gpio_request(MB442_PIO_FLASH_VPP, "Flash VPP");
 	gpio_direction_output(MB442_PIO_FLASH_VPP, 0);
 
-	gpio_request(MB442_PIO_STE100P_RESET, "STE100P reset");
-	gpio_direction_output(MB442_PIO_STE100P_RESET, 1);
-
 	stx7100_configure_ethernet(&(struct stx7100_ethernet_config) {
 			.mode = stx7100_ethernet_mode_mii,
 			.ext_clk = 0,
@@ -149,13 +312,7 @@
 			.mdio_bus_data = &stmmac_mdio_bus,
 		});
 
-	/* Reset the SMSC 91C111 Ethernet chip */
-	gpio_request(MB442_PIO_SMC91X_RESET, "SMC91x reset");
-	gpio_direction_output(MB442_PIO_SMC91X_RESET, 0);
-	udelay(1);
-	gpio_set_value(MB442_PIO_SMC91X_RESET, 1);
-	udelay(1);
-	gpio_set_value(MB442_PIO_SMC91X_RESET, 0);
+    configure_pin(2, 2, STPIO_BIDIR_Z1);
 
 	return platform_add_devices(mb442_devices,
 			ARRAY_SIZE(mb442_devices));
--- linux-sh4/drivers/serial/stm-asc.c	2011-08-16 18:57:59.000000000 +0200
+++ b/stm-asc.c	2011-09-29 18:32:31.495178472 +0200
@@ -574,7 +574,7 @@
 	struct platform_device *pdev = to_platform_device(port->dev);
 	int size = pdev->resource[0].end - pdev->resource[0].start + 1;
 
-	if (!ascport->pad_state) {
+	if ((!ascport->pad_state) && (ascport->pad_config->gpios->gpio != 35)) {
 		/* Can't use dev_name() here as we can be called early */
 		ascport->pad_state = stm_pad_claim(ascport->pad_config,
 				"stasc");
--- linux-sh4/drivers/stm/stx7100_hispeed.c	2011-08-16 18:58:00.000000000 +0200
+++ b/stx7100_hispeed.c	2011-09-29 17:40:18.743612862 +0200
@@ -189,7 +189,8 @@
 	 * option to select an inverted output from the TPS2052, so no
 	 * software work around is required.)
 	 */
-	gpio = stm_pad_gpio_request_output(state, "PWR", 1);
+/* for CUBEREVO_250HD, CUBEREVO_MINI_FTA, CUBEREVO_2000HD */
+	gpio = stm_pad_gpio_request_output(state, "PWR", 0);
 	BUG_ON(gpio == STM_GPIO_INVALID);
 
 	sc = sysconf_claim(SYS_CFG, 2, 1, 1, "stm-usb");

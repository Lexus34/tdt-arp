#
# RSYNC
#
BEGIN[[
rsync
  3.1.0
  {PN}-{PV}
  extract:http://rsync.samba.org/ftp/{PN}/src/{PN}-{PV}.tar.gz
  nothing:file://../root/etc/rsyncd.conf
  make:install:DESTDIR=TARGETS
;
]]END

DESCRIPTION_rsync = File synchronization tool
RDEPENDS_rsync = libpopt0 libc6
define conffiles_rsync
/etc/rsyncd.conf
endef
FILES_rsync = /etc/rsyncd.conf \
	      /usr/bin/rsync

$(DEPDIR)/rsync.do_prepare: bootstrap $(DEPENDS_rsync)
	$(PREPARE_rsync)
	touch $@

$(DEPDIR)/rsync.do_compile: $(DEPDIR)/rsync.do_prepare
	cd $(DIR_rsync) && \
		$(BUILDENV) \
		./configure \
			--build=$(build) \
			--host=$(target) \
			--exec-prefix=/usr \
			--prefix=/usr \
			--disable-xattr-support \
			--disable-acl-support && \
		$(MAKE)
	touch $@

$(DEPDIR)/rsync: $(DEPDIR)/rsync.do_compile
	$(start_build)
	cd $(DIR_rsync) && \
		$(INSTALL_rsync)
	$(INSTALL_DIR) $(PKDIR)/etc && \
	$(INSTALL_DIR) $(PKDIR)/usr/bin && \
	$(INSTALL_BIN) $(DIR_rsync)/rsync $(PKDIR)/usr/bin && \
	$(INSTALL_FILE) $(DIR_rsync)/rsyncd.conf $(PKDIR)/etc && \
	$(tocdk_build)
	$(toflash_build)
	touch $@
#
# udpxy
#
BEGIN[[
udpxy
  1.0.23-0
  {PN}-{PV}
  http://sourceforge.net/projects/udpxy/files/udpxy/Chipmunk-1.0/udpxy.{PV}-prod.tar.gz
  #for patch -p0 use the following
  patch-0:file://udpxy-makefile.patch
;
]]END

# You can use it as example of building and making package for new utility.
# First of all take a look at smart-rules file. Read the documentation at the beginning.
#
# At the first stage let's build one single package. For example udpxy. Be careful, each package name should be unique.
# First of all you should define some necessary info about your package.
# Such as 'Description:' field in control file

DESCRIPTION_udpxy := udp to http stream proxy

# Next set package release number and increase it each time you change something here in make scripts.
# Release number is part of the package version, updating it tells others that they can upgrade their system now.

PKGR_udpxy = r0

# Other variables are optional and have default values and another are taken from smart-rules (full list below)
# Usually each utility is split into three make-targets. Target name and package name 'udpxy' should be the same.
# Write
#  $(DEPDIR)/udpxy.do_prepare:
# But not
#  $(DEPDIR)/udpxy_proxy.do_prepare:
# *exceptions of this rule discussed later.

# Also target should contain only A-z characters and underscore "_".

# Firstly, downloading and patching. Use $(DEPENDS_udpxy) from smart rules as target-depends.
# In the body use $(PREPARE_udpxy) generated by smart-rules
# You can add your special commands too.

$(DEPDIR)/udpxy.do_prepare: $(DEPENDS_udpxy)
	$(PREPARE_udpxy)
	touch $@

# Secondly, the configure and compilation stage
# Each target should ends with 'touch $@'

$(DEPDIR)/udpxy.do_compile: $(DEPDIR)/udpxy.do_prepare
	cd $(DIR_udpxy) && \
		export CC=sh4-linux-gcc && \
		$(MAKE)
	touch $@

# Finally, install and packaging!
# How does it works:
#  start with line $(start_build) to prepare temporary directories and determine package name by the target name.
#  At first all files should go to temporary directory $(PKDIR) which is cdk/packagingtmpdir.
#  If you fill $(PKDIR) correctly then our scripts could proceed.
#  You could call one of the following:
#    $(tocdk_build) - copy all $(PKDIR) contents to tufsbox/cdkroot to use them later if something depends on them.
#    $(toflash_build) - At first do exactly that $(toflash_build) does. After install package to tufsbox/root to include it in image.
#  Tip: $(tocdk_build) and $(toflash_build) could be used simultaneously.

$(DEPDIR)/udpxy: $(DEPDIR)/udpxy.do_compile
	$(start_build)
	cd $(DIR_udpxy)  && \
		export INSTALLROOT=$(PKDIR)/usr && \
		$(MAKE) install
	$(toflash_build)
	touch $@

# Note: all above defined variables has suffix 'udpxy' same as make-target name '$(DEPDIR)/udpxy'
# If you want to change name of make-target for some reason add $(call parent_pk,udpxy) before $(start_build) line.
# Of course place your variables suffix instead of udpxy.

# Some words about git and svn.
# It is available to automatically determine version from git and svn
# If there is git/svn rule in smart-rules and the version equals git/svn then the version will be automatically evaluated during $(start_build)
# Note: it is assumed that there is only one repo for the utility.
# If you use your own git/svn fetch mechanism we provide you with $(get_git_version) or $(get_svn_version), but make sure that DIR_foo is git/svn repo.

# FILES variable
# FILES variable is the filter for your $(PKDIR), by default it equals "/" so all files from $(PKDIR) are built into the package. It is list of files and directories separated by space. Wildcards are supported.
# Wildcards used in the FILES variables are processed via the python function fnmatch. The following items are of note about this function:
#   /<dir>/*: This will match all files and directories in the dir - it will not match other directories.
#   /<dir>/a*: This will only match files, and not directories.
#   /dir: will include the directory dir in the package, which in turn will include all files in the directory and all subdirectories.

# Info about some additional variables
# PKGV_foo
#  Taken from smart rules version. Set if you don't use smart-rules
# SRC_URI_foo
#  Sources from which package is built, taken from smart-rules file://, http://, git://, svn:// rules.
# NAME_foo
#  If real package name is too long put it in this variable. By default it is like in varible names.
# Next variables has default values and influence CONTROL file fields only:
# MAINTAINER_foo := Ar-P team
# PACKAGE_ARCH_foo := sh4
# SECTION_foo := base
# PRIORITY_foo := optional
# LICENSE_foo := unknown
# HOMEPAGE_foo := unknown
# You set package dependencies in CONTROL file with:
# RDEPENDS_foo :=
# RREPLACES :=
# RCONFLICTS :=

# post/pre inst/rm Scripts
# For these sripts use make define as following:

define postinst_foo
#!/bin/sh
update-rc.d -r $$OPKG_OFFLINE_ROOT/ foo start 99 S .
endef

# This is all about scripts
# Note: init.d script starting and stopping is handled by update-rc.d

# Multi-Packaging
# When you whant to split files from one target to different packages you should set PACKAGES_parentfoo value.
# By default parentfoo is equals make target name. Place subpackages names to PACKAGES_parentfoo variable,
# parentfoo could be also in the list. Example:
## PACKAGES_megaprog = megaprog_extra megaprog
# Then set FILES for each subpackage
## FILES_megaprog = /bin/prog /lib/*.so*
## FILES_megaprog_extra = /lib/megaprog-addon.so
# NOTE: files are moving to pacakges in same order they are listed in PACKAGES variable.

# Optional install to flash
# When you call $(tocdk_build)/$(toflash_build) all packages are installed to image.
# If you want to select some non-installing packages from the same target (multi-packaging case)
# just list them in EXTRA_parentfoo variable
# DIST_parentfoo variable works vice-versa

#
# autofs
#
BEGIN[[
autofs
  4.1.4
  {PN}-{PV}
  extract:http://kernel.org/pub/linux/daemons/{PN}/v4/{PN}-{PV}.tar.gz
  patch:file://{PN}-{PV}.patch
  make:install:INSTALLROOT=PKDIR
;
]]END

DESCRIPTION_autofs = Kernel based automounter for linux. \
 Kernel based automounter for linux..
RDEPENDS_autofs = libc6

define postinst_autofs
#!/bin/sh
if type update-rc.d >/dev/null 2>/dev/null; then
	if [ -n "$$D" ]; then
		OPT="-r $$D"
	else
		OPT="-s"
	fi
	update-rc.d $OPT autofs defaults
fi
endef

define postrm_autofs
#!/bin/sh
if type update-rc.d >/dev/null 2>/dev/null; then
	if [ -n "$$D" ]; then
		OPT="-r $$D"
	else
		OPT=""
	fi
	update-rc.d $OPT autofs remove
fi
endef

define preinst_autofs
#!/bin/sh
if [ -z "$$D" -a -f "/etc/init.d/autofs" ]; then
	/etc/init.d/autofs stop
fi
if type update-rc.d >/dev/null 2>/dev/null; then
	if [ -n "$$D" ]; then
		OPT="-f -r $$D"
	else
		OPT="-f"
	fi
	update-rc.d $OPT autofs remove
fi
endef

define prerm_autofs
#!/bin/sh
if [ -z "$D" ]; then
	/etc/init.d/autofs stop
fi
endef

FILES_autofs = \
/etc/* \
/usr/*

$(DEPDIR)/autofs.do_prepare: bootstrap $(DEPENDS_autofs)
	$(PREPARE_autofs)
	touch $@

$(DEPDIR)/autofs.do_compile: $(DEPDIR)/autofs.do_prepare
	cd $(DIR_autofs) && \
		cp aclocal.m4 acinclude.m4 && \
		autoconf && \
		$(BUILDENV) \
		./configure \
			--build=$(build) \
			--host=$(target) \
			--prefix=/usr && \
		$(MAKE) all CC=$(target)-gcc STRIP=$(target)-strip
	touch $@

$(DEPDIR)/autofs: $(DEPDIR)/autofs.do_compile
	$(start_build)
	cd $(DIR_autofs) && \
		$(INSTALL_autofs)
	$(tocdk_build)
	$(toflash_build)
	touch $@

#
# imagemagick
#
BEGIN[[
imagemagick
  6.8.0-4
  ImageMagick-{PV}
  extract:ftp://ftp.fifi.org/pub/ImageMagick/ImageMagick-{PV}.tar.bz2
  make:install:prefix=/usr:DESTDIR=PKDIR
;
]]END

DESCRIPTION_imagemagick = "imagemagick"
FILES_imagemagick = \
/usr/*
$(DEPDIR)/imagemagick.do_prepare: bootstrap $(DEPENDS_imagemagick)
	$(PREPARE_imagemagick)
	touch $@

$(DEPDIR)/imagemagick.do_compile: $(DEPDIR)/imagemagick.do_prepare
	cd $(DIR_imagemagick) && \
	$(BUILDENV) \
	CFLAGS="-O1" \
	PKG_CONFIG=$(hostprefix)/bin/pkg-config \
	./configure \
		--host=$(target) \
		--prefix=/usr \
		--without-dps \
		--without-fpx \
		--without-gslib \
		--without-jbig \
		--without-jp2 \
		--without-lcms \
		--without-tiff \
		--without-xml \
		--without-perl \
		--disable-openmp \
		--disable-opencl \
		--without-zlib \
		--enable-shared \
		--enable-static \
		--without-x && \
	$(MAKE) all
	touch $@

$(DEPDIR)/imagemagick: $(DEPDIR)/imagemagick.do_compile
	$(start_build)
	cd $(DIR_imagemagick) && \
		$(INSTALL_imagemagick)
	$(tocdk_build)
	$(toflash_build)
	touch $@
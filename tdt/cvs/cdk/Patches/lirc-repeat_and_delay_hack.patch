--- lirc-0.9.0.orig/daemons/lircd.c.org	2014-07-20 22:57:20.610748484 +0300
+++ lirc-0.9.0.orig/daemons/lircd.c	2014-07-20 23:16:53.644565246 +0300
@@ -97,6 +97,8 @@
 static int repeat_fd = -1;
 static char *repeat_message = NULL;
 static __u32 repeat_max = REPEAT_MAX_DEFAULT;
+static int repeat_delay = 500;
+static int repeat_period = 100;
 
 extern struct hardware hw;
 
@@ -146,6 +148,7 @@
 
 static void log_enable(int enabled);
 static int log_enabled = 1;
+static void setup_repeatrate_uinputfd(int source);
 
 #ifndef USE_SYSLOG
 #define HOSTNAME_LEN 128
@@ -408,6 +411,39 @@
 	}
 }
 
+/**
+ * @brief Set the repeat rate for a given input device
+ * @details For some applications we need to define a
+ *  repeate rate otherwise the remote control get unusable
+ *
+ * @param source file descripter of the input device
+ * @return 0 on succcess and any value in case of an error
+ */
+static void setup_repeatrate_uinputfd(int source)
+{
+
+    int res = 0;
+    struct input_event ie;
+    ie.type = EV_REP;
+    ie.code = REP_DELAY;
+    ie.value = repeat_delay;
+    if (-1 == write(source, &ie, sizeof(ie)))
+    {   res = 1;
+        logprintf(LOG_ERR, "REP_DELAY: %s", strerror(errno));
+    }
+    ie.code = REP_PERIOD;
+    ie.value = repeat_period;
+    if (-1 == write(source, &ie, sizeof(ie)))
+    {
+        res = 2;
+        logprintf(LOG_ERR, "REP_PERIOD: %s", strerror(errno));
+    }
+    if( 0 == res )
+    {
+        logprintf(LOG_INFO, "Repeat rate set to delay: %d period: %d", repeat_delay, repeat_period);
+    }
+}
+
 int setup_uinputfd(const char *name)
 {
 #if defined(__linux__)
@@ -956,6 +992,7 @@
 
 	if (useuinput) {
 		uinputfd = setup_uinputfd(progname);
+		setup_repeatrate_uinputfd(uinputfd);
 	}
 	if (listen_tcpip) {
 		int enable = 1;
@@ -2104,9 +2141,11 @@
 			{"uinput", no_argument, NULL, 'u'},
 #                       endif
 			{"repeat-max", required_argument, NULL, 'R'},
+			{"repeat-delay", required_argument, NULL, 'Y'},
+			{"repeat-period", required_argument, NULL, 'O'},
 			{0, 0, 0, 0}
 		};
-		c = getopt_long(argc, argv, "hvnp:H:d:o:P:l::c:r::aR:"
+		c = getopt_long(argc, argv, "hvnp:H:d:o:P:l::c:r::aR:Y:O:"
 #                               if defined(__linux__)
 				"u"
 #                               endif
@@ -2144,6 +2183,8 @@
 			printf("\t -u --uinput\t\tgenerate Linux input events\n");
 #                       endif
 			printf("\t -R --repeat-max=limit\t\tallow at most this many repeats\n");
+			printf("\t -Y --repeat-delay=value\t\trepeat rate initial delay in ms\n");
+			printf("\t -O --repeat-period=value\t\trepeat period in ms\n");
 			return (EXIT_SUCCESS);
 		case 'v':
 			printf("%s %s\n", progname, VERSION);
@@ -2236,6 +2277,12 @@
 		case 'R':
 			repeat_max = atoi(optarg);
 			break;
+		case 'Y':
+			repeat_delay = atoi(optarg);
+			break;
+		case 'O':
+			repeat_period = atoi(optarg);
+			break;
 		default:
 			printf("Usage: %s [options] [config-file]\n", progname);
 			return (EXIT_FAILURE);

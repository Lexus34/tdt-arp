--- a/mytube/src/plugin.py	2013-09-28 16:25:39.460362521 +0300
+++ b/mytube/src/plugin.py	2013-10-17 23:12:10.000000000 +0300
@@ -1,8 +1,6 @@
 from . import _
 
 from Plugins.Plugin import PluginDescriptor
-from MyTubeService import validate_cert
-from enigma import eTPM
 from Components.config import ConfigSubsection, config, ConfigYesNo
 
 config.plugins.mytubestart = ConfigSubsection()
@@ -11,17 +9,8 @@
 
 def MyTubeMain(session, **kwargs):
 	import ui
-	l2 = False
-	l2cert = ui.etpm.getCert(eTPM.TPMD_DT_LEVEL2_CERT)
-	if l2cert is None:
-		print "l2cert not found"
-		return
-
-	l2key = validate_cert(l2cert, ui.rootkey)
-	if l2key is None:
-		print "l2cert invalid"
-		return
 	l2 = True
+	l2key = None
 	if l2:
 		session.open(ui.MyTubePlayerMainScreen,plugin_path,l2key)
 
--- a/mytube/src/ui.py	2013-09-28 16:25:39.464362524 +0300
+++ b/mytube/src/ui.py	2013-10-18 18:30:18.763658799 +0300
@@ -17,7 +17,7 @@
 from Components.config import config, ConfigSelection, ConfigSubsection, ConfigText, ConfigYesNo, getConfigListEntry, ConfigPassword
 #, ConfigIP, ConfigNumber, ConfigLocations
 from MyTubeSearch import ConfigTextWithGoogleSuggestions, MyTubeSettingsScreen, MyTubeTasksScreen, MyTubeHistoryScreen
-from MyTubeService import validate_cert, get_rnd, myTubeService
+from MyTubeService import myTubeService
 from Screens.ChoiceBox import ChoiceBox
 from Screens.InfoBarGenerics import InfoBarNotifications, InfoBarSeek
 from Screens.MessageBox import MessageBox
@@ -98,6 +98,7 @@
 				 ("il", _("Israel")),
 				 ("it", _("Italy")),
 				 ("jp", _("Japan")),
+				 ("lv", _("Latvia")),
 				 ("mx", _("Mexico")),
 				 ("nz", _("New Zealand")),
 				 ("pl", _("Poland")),
@@ -399,47 +400,10 @@
 		current = self["config"].getCurrent()
 		if current[1].help_window.instance is not None:
 			current[1].help_window.instance.hide()
-
-		l3cert = etpm.getCert(eTPM.TPMD_DT_LEVEL3_CERT)
-		if l3cert is None or l3cert is "":
-			self["videoactions"].setEnabled(False)
-			self["searchactions"].setEnabled(False)
-			self["config_actions"].setEnabled(False)
-			self["historyactions"].setEnabled(False)
-			self["statusactions"].setEnabled(True)
-			self.hideSuggestions()
-			self.statuslist = []
-			self.statuslist.append(( _("Genuine Dreambox validation failed!"), _("Verify your Dreambox authenticity by running the genuine dreambox plugin!" ) ))
-			self["feedlist"].style = "state"
-			self['feedlist'].setList(self.statuslist)
-			return
-
-		self.l3key = validate_cert(l3cert, self.l2key)
-		if self.l3key is None:
-			print "l3cert invalid"
-			return
-		rnd = get_rnd()
-		if rnd is None:
-			print "random error"
-			return
-
-		val = etpm.challenge(rnd)
-		result = decrypt_block(val, self.l3key)
-
-		self.statuslist = []
-		if result[80:88] == rnd:
-
-			# we need to login here; startService() is fired too often for external curl
-			self.tryUserLogin()
-
 			self.statuslist.append(( _("Fetching feed entries"), _("Trying to download the Youtube feed entries. Please wait..." ) ))
 			self["feedlist"].style = "state"
 			self['feedlist'].setList(self.statuslist)
 			self.Timer.start(200)
-		else:
-			self.statuslist.append(( _("Genuine Dreambox validation failed!"), _("Verify your Dreambox authenticity by running the genuine dreambox plugin!" ) ))
-			self["feedlist"].style = "state"
-			self['feedlist'].setList(self.statuslist)
 
 	def TimerFire(self):
 		self.Timer.stop()
@@ -483,18 +447,7 @@
 			self.statuslist = []
 			self.hideSuggestions()
 			result = None
-			if self.l3key is not None:
-				rnd = get_rnd()
-				if rnd is None:
-					return
-				val = etpm.challenge(rnd)
-				result = decrypt_block(val, self.l3key)
-			if not result or result[80:88] != rnd:
-				self["key_green"].show()
-				self.statuslist.append(( _("Genuine Dreambox validation failed!"), _("Verify your Dreambox authenticity by running the genuine dreambox plugin!" ) ))
-				self["feedlist"].style = "state"
-				self['feedlist'].setList(self.statuslist)
-			else:
+			if not result:
 				print "Genuine Dreambox validation passed"
 				if self.FirstRun == True:
 					self.appendEntries = False
